name: CI

on:
  push:
  pull_request:
    types: [opened, reopened]

defaults:
  run:
    shell: bash

env:
  PACKAGE_NAME: nuitka_bug
  MAIN_MODULE: main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04] # , macos-13, windows-2022
        python-version: ["3.11"]
        nuitka-version: ["nuitka==2.6.2", "https://github.com/Nuitka/Nuitka/archive/refs/heads/factory.zip"] # , "nuitka==2.2", "nuitka==2.1", "nuitka==2.0", "nuitka==2.5", "nuitka==2.4",
        include:
          - os: ubuntu-22.04
            name: Linux
            nuitkaArgs: ""
            exeExtension: ""
            allowedLinkedLibs: ""
            executableExtension: ".bin"
          # - os: macos-13
          #   name: macOS
          #   nuitkaArgs: ""
          #   exeExtension: ""
          #   allowedLinkedLibs: ""
          #   executableExtension: ".bin"
          # - os: windows-2022
          #   name: Windows
          #   nuitkaArgs: "--mingw64"
          #   exeExtension: ".exe"
          #   allowedLinkedLibs: ""
          #   executableExtension: ".exe"

    steps:
      - uses: actions/checkout@v3

      - name: msys
        if: ${{ matrix.name == 'Windows' }}
        uses: msys2/setup-msys2@v2

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
      
      - name: Cache Nuitka
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.nuitka_cache
          key: ${{ runner.os }}-nuitka

      - name: Install poetry
        run: pipx install poetry==1.8.3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install dependencies
        run: |
          poetry install --verbose
          poetry add ${{ matrix.nuitka-version }}
          poetry run python -m nuitka --version
        shell: bash

      # use action instead of wget or curl to support Windows with the same action
      - uses: suisei-cn/actions-download-file@v1.0.1
        name: Download cicdtools
        with:
          url: "https://github.com/Aksem/modapp-cicdtools/releases/download/v0.1.12/cicdtools_${{ matrix.name }}.zip"
          target: ${{ github.workspace }}

      - name: Install cicdtools
        run: |
          unzip cicdtools_${{ matrix.name }}.zip
          chmod +x cicdtools_${{ matrix.name }}/cicdtools${{ matrix.exeExtension }}
        shell: bash

      - name: Build
        if: ${{ !cancelled() }}
        run: |
          export NUITKA_CACHE_DIR=$PWD/.nuitka_cache
          export CCACHE_DIR=$PWD/.ccache

          poetry run python -m nuitka \
            --standalone \
            --follow-imports \
            --assume-yes-for-downloads \
            --plugin-enable="pylint-warnings" \
            --warn-unusual-code \
            --warn-implicit-exceptions \
            --show-memory \
            --show-modules \
            --trace-execution \
            --include-module="30fcd23745efe32ce681__mypyc" \
            ${{ matrix.nuitkaArgs }} \
            ${{ env.PACKAGE_NAME }}/${{ env.MAIN_MODULE }}.py
        shell: bash

      - name: TestRun
        if: ${{ !cancelled() }}
        run: |
          ./cicdtools_${{ matrix.name }}/cicdtools${{ matrix.exeExtension }} test-run "${{ env.MAIN_MODULE }}.dist/${{ env.MAIN_MODULE }}${{ matrix.executableExtension }}"
        shell: bash

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: ${{ env.MAIN_MODULE }}_${{ matrix.name }}_${{ matrix.nuitka-version }}
          path: |
            ${{ github.workspace }}/${{ env.MAIN_MODULE }}.dist

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: nuitka_crash_report_${{ matrix.name }}_${{ matrix.nuitka-version }}
          path: |
            ${{ github.workspace }}/nuitka-crash-report.xml
